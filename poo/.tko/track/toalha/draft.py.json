{
    "patches": [
        {
            "label": "2025-09-18_17-25-29",
            "content": "@@ -284,22 +284,21 @@\n %C3%A9:%7Btowel\n-.color\n+, %22P%22\n %7D%22)%0A    \n",
            "lines": "12"
        },
        {
            "label": "2025-09-18_17-26-13",
            "content": "@@ -303,25 +303,16 @@\n        %0A        \n-%0A        \n",
            "lines": "12"
        },
        {
            "label": "2025-09-18_17-27-54",
            "content": "@@ -139,29 +139,8 @@\n =0%0A%0A\n-%0A        #refencias %0A\n     \n@@ -304,16 +304,24 @@\n       %0A        %0A\n+        \n",
            "lines": "13"
        },
        {
            "label": "2025-09-18_17-37-56",
            "content": "@@ -328,14 +328,13 @@\n    %0A        \n- \n %0A\n",
            "lines": "14"
        },
        {
            "label": "2025-09-18_17-44-01",
            "content": "@@ -136,16 +136,24 @@\n int=0%0A%0A%0A\n+        \n #refenci\n@@ -156,16 +156,24 @@\n encias %0A\n+        \n print( %22\n@@ -199,16 +199,24 @@\n oalha%22)%0A\n+        \n color=in\n@@ -221,16 +221,24 @@\n input()%0A\n+        \n towel: T\n@@ -260,16 +260,24 @@\n or,%22P%22)%0A\n+        \n print(f%22\n",
            "lines": "14"
        },
        {
            "label": "2025-09-18_18-34-36",
            "content": "@@ -139,717 +139,157 @@\n =0%0A%0A\n-    def getMaxWetness(self)-%3Eint:%0A        if self.size== %22P%22:%0A            return 10%0A        if self.size==%22M%22:%0A            return 20%0A        if self.size==%22G%22:%0A            return 30%0A        return 0%0A    %0A    def dry(self, amount:int)-%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E self.getMaxWetness():%0A            print(%22Toalha encharcada%22)%0A            self.wetness=self.getMaxWetness()%0A%0A    def wringOut(self)-%3E None:%0A        self.wetness = 0%0A%0A    def isDry(self) -%3E None:%0A        self.wetness%0A    %0A    def show(self) -%3E None:%0A        print(self)%0A    def __str__(self) -%3E str:%0A        return f%22%7Bs\n+%0A#refencias %0Aprint( %22qual a cor da sua toalha%22)%0Acolor=input()%0Atowel: Towel= Towel(color,%22P%22)%0Aprint(f%22 a cor da sua toalha %C3%A9:%7Btow\n el\n-f\n .color%7D\n- %7Bself.size%7D %7Bself.wetness%7D%22%0A    %0A#testes %0Atowel = Towel (%22azul%22, %22P%22)%0Atowel.show()\n+%22)%0A        %0A\n     \n",
            "lines": "14"
        },
        {
            "label": "2025-09-20_14-14-05",
            "content": "@@ -35,17 +35,16 @@\n , color:\n- \n str, siz\n@@ -49,27 +49,13 @@\n ize:\n- \n str):\n- # construtor\n %0A   \n@@ -74,32 +74,17 @@\n lor:\n- \n str\n- = \n+=\n color\n- # atributos\n %0A   \n@@ -98,23 +98,20 @@\n lf.size:\n- \n str\n- = \n+=\n size%0A   \n@@ -132,343 +132,26 @@\n ess:\n- \n int\n- = 0%0A    %0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            print(%22toalha encharcada%22)%0A%0A    def isDry(self):%0A        return self.wetness == 0%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def is\n+=0%0A%0A    def get\n MaxW\n@@ -162,20 +162,18 @@\n ss(self)\n- \n -%3E\n- \n int:%0A   \n@@ -193,31 +193,15 @@\n size\n- \n == %22P%22:\n- # early return\n %0A   \n@@ -239,20 +239,18 @@\n elf.size\n- \n ==\n- \n %22M%22:%0A   \n@@ -288,20 +288,18 @@\n elf.size\n- \n ==\n- \n %22G%22:%0A   \n@@ -337,327 +337,135 @@\n rn 0\n- # default return%0A%0A    def __str__(self) -%3E str: # toString%0A        return f%22Cor: %7Bself.color%7D, Tamanho: %7Bself.size%7D, Umidade: %7Bself.wetness%7D%22%0A%0Adef main(): %0A    towel: Towel = Towel(%22%22, %22%22) # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A        line: str = input() # 4: perguntar ao usuario%0A\n+%0A    %0A    def dry(self, amount:int)-%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E self.getMaxWetness():%0A    \n     \n@@ -479,25 +479,27 @@\n nt(%22\n-$%22 + line) #\n+Toalha\n  e\n+n\n ch\n-o\n+arcada%22)\n %0A   \n@@ -507,294 +507,185 @@\n     \n-args: list%5Bstr%5D = line.split(%22 %22) # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22criar%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22seca%22\n+    self.wetness=self.getMaxWetness()%0A%0A    def wringOut(self)-%3E None:%0A        self.wetness = 0%0A%0A    def isDry(self) -%3E None:%0A        self.wetness%0A    %0A    def show(self) -%3E None\n :%0A  \n@@ -694,357 +694,168 @@\n     \n-    \n print(\n-%22sim%22 if towel.isDry() else %22nao%22)%0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut()%0A        elif args%5B0%5D == %22enxugar%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A        else: # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0Amain()\n+self)%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22%0A    %0A#testes %0Atowel = Towel (%22azul%22, %22P%22)%0Atowel.show()         %0A\n",
            "lines": "35"
        },
        {
            "label": "2025-09-25_20-00-45",
            "content": "@@ -35,16 +35,17 @@\n , color:\n+ \n str, siz\n@@ -50,13 +50,27 @@\n ize:\n+ \n str):\n+ # construtor\n %0A   \n@@ -89,17 +89,32 @@\n lor:\n+ \n str\n-=\n+ = \n color\n+ # atributos\n %0A   \n@@ -132,12 +132,15 @@\n ize:\n+ \n str\n-=\n+ = \n size\n@@ -165,211 +165,14 @@\n ess:\n-int=0%0A%0A    def getMaxWetness(self)-%3Eint:%0A        if self.size== %22P%22:%0A            return 10%0A        if self.size==%22M%22:%0A            return 20%0A        if self.size==%22G%22:%0A            return 30%0A        return\n+ int =\n  0%0A \n@@ -204,12 +204,14 @@\n unt:\n+ \n int)\n+ \n -%3E N\n@@ -275,17 +275,65 @@\n ss %3E\n+=\n  self.\n-get\n+isMaxWetness():%0A            self.wetness = self.is\n MaxW\n@@ -332,33 +332,32 @@\n f.isMaxWetness()\n-:\n %0A            pri\n@@ -360,17 +360,17 @@\n  print(%22\n-T\n+t\n oalha en\n@@ -384,53 +384,62 @@\n a%22)%0A\n+%0A\n     \n-        self.wetness=self.getMaxW\n+def isDry(self):%0A        return self.w\n etness\n-()\n+ == 0\n %0A%0A  \n@@ -458,23 +458,16 @@\n ut(self)\n--%3E None\n :%0A      \n@@ -500,112 +500,235 @@\n f is\n-Dry(self) -%3E bool:%0A        return self.wetness == \n+MaxWetness(self) -%3E int:%0A        if self.size == %22P%22: # early return%0A            return 10%0A        if self.size == %22M%22:%0A            return 2\n 0%0A    \n-%0A\n     \n-def show(self) -%3E None:%0A        print(self)\n+if self.size == %22G%22:%0A            return 30%0A        return 0 # default return%0A\n %0A   \n@@ -753,16 +753,27 @@\n  -%3E str:\n+ # toString\n %0A       \n@@ -782,16 +782,21 @@\n eturn f%22\n+Cor: \n %7Bself.co\n@@ -799,16 +799,26 @@\n f.color%7D\n+, Tamanho:\n  %7Bself.s\n@@ -821,16 +821,26 @@\n lf.size%7D\n+, Umidade:\n  %7Bself.w\n@@ -852,23 +852,34 @@\n s%7D%22%0A\n-    %0A#testes %0At\n+%0Adef main(): %0A    towel: T\n owel\n@@ -890,277 +890,832 @@\n owel\n- \n (%22\n-Azul\n %22, %22\n-P\n %22)\n-%0Atowel.show()     %0Atowel.dry(5)%0Atowel.show()%0A%0Aprint(towel.isDry())%0A%0Atowel.dry(5)%0Atowel.show()%0Atowel.dry(5)%0Atowel.show()%0A%0Atowel.wringOut()%0Atowel.show()%0Atowel=Towel (%22verde%22, %22G%22)%0Aprint(towel.isDry())%0Atowel.dry(30)%0Atowel.show()%0Aprint(towel.isDry())%0Atowel.dry(1\n+ # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A        line: str = input() # 4: perguntar ao usuario%0A        print(%22$%22 + line) # echo%0A        args: list%5Bstr%5D = line.split(%22 %22) # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22criar%22: # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut()%0A        elif args%5B0%5D == %22enxugar%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A        else: # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0Amain(\n )\n",
            "lines": "57"
        },
        {
            "label": "2025-09-25_20-01-57",
            "content": "class Towel:\n    def __init__(self, color:str, size:str):\n        self.color:str=color\n        self.size:str=size\n        self.wetness:int=0\n\n    def getMaxWetness(self)->int:\n        if self.size== \"P\":\n            return 10\n        if self.size==\"M\":\n            return 20\n        if self.size==\"G\":\n            return 30\n        return 0\n    \n    def dry(self, amount:int)-> None:\n        self.wetness += amount\n        if self.wetness > self.getMaxWetness():\n            print(\"Toalha encharcada\")\n            self.wetness=self.getMaxWetness()\n\n    def wringOut(self)-> None:\n        self.wetness = 0\n\n    def isDry(self) -> bool:\n        return self.wetness == 0\n    \n    def show(self) -> None:\n        print(self)\n    def __str__(self) -> str:\n        return f\"{self.color} {self.size} {self.wetness}\"\n    \n#testes \ntowel = Towel (\"Azul\", \"P\")\ntowel.show()     \ntowel.dry(5)\ntowel.show()\n\nprint(towel.isDry())\n\ntowel.dry(5)\ntowel.show()\ntowel.dry(5)\ntowel.show()\n\ntowel.wringOut()\ntowel.show()\ntowel=Towel (\"verde\", \"G\")\nprint(towel.isDry())\ntowel.dry(30)\ntowel.show()\nprint(towel.isDry())\ntowel.dry(1)",
            "lines": "53"
        }
    ]
}