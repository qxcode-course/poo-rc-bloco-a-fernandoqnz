{
    "patches": [
        {
            "label": "2025-10-02_22-19-35",
            "content": "@@ -823,15 +823,11 @@\n def \n-__\n str\n-__\n (sel\n",
            "lines": "62"
        },
        {
            "label": "2025-10-03_00-29-55",
            "content": "@@ -736,16 +736,12 @@\n def \n-__\n show\n-__\n (sel\n",
            "lines": "62"
        },
        {
            "label": "2025-10-03_00-30-30",
            "content": "@@ -736,12 +736,16 @@\n def \n+__\n show\n+__\n (sel\n",
            "lines": "62"
        },
        {
            "label": "2025-10-03_00-48-55",
            "content": "@@ -98,16 +98,29 @@\n  = color\n+  # atributos\n %0A       \n@@ -216,29 +216,8 @@\n one:\n-  # aumenta a umidade\n %0A   \n@@ -272,27 +272,26 @@\n ess %3E= self.\n-get\n+is\n MaxWetness()\n@@ -324,19 +324,18 @@\n  = self.\n-get\n+is\n MaxWetne\n@@ -402,16 +402,8 @@\n elf)\n- -%3E bool\n :%0A  \n@@ -460,27 +460,9 @@\n elf)\n- -%3E None:  # torcer\n+:\n %0A   \n@@ -496,11 +496,10 @@\n def \n-get\n+is\n MaxW\n@@ -704,16 +704,34 @@\n return 0\n+  # default return\n %0A%0A    de\n@@ -986,24 +986,85 @@\n  %22%22)\n-%0A    while True:\n+  # 2: criar um obj com qq valor inicial%0A    while True:  # 3: loop infinito%0A\n %0A   \n@@ -1083,24 +1083,51 @@\n tr = input()\n+  # 4: perguntar ao usuario\n %0A        pri\n@@ -1140,16 +1140,24 @@\n  + line)\n+  # echo\n %0A       \n@@ -1190,16 +1190,41 @@\n lit(%22 %22)\n+  # 5: separar argumentos\n %0A%0A      \n@@ -1305,24 +1305,17 @@\n  # c\n-riar cor tamanho\n+olor size\n %0A   \n@@ -1740,16 +1740,27 @@\n    else:\n+  # 7: erro\n %0A       \n@@ -1808,35 +1808,8 @@\n )%0A%0A%0A\n-if __name__ == %22__main__%22:%0A\n     \n@@ -1814,9 +1814,8 @@\n   main()\n-%0A\n",
            "lines": "62"
        },
        {
            "label": "2025-10-03_13-31-33",
            "content": "class Towel:\n    def __init__(self, color: str, size: str):  # construtor\n        self.color: str = color\n        self.size: str = size\n        self.wetness: int = 0\n\n    def dry(self, amount: int) -> None:  # aumenta a umidade\n        self.wetness += amount\n        if self.wetness >= self.getMaxWetness():\n            self.wetness = self.getMaxWetness()\n            print(\"toalha encharcada\")\n\n    def isDry(self) -> bool:\n        return self.wetness == 0\n\n    def wringOut(self) -> None:  # torcer\n        self.wetness = 0\n\n    def getMaxWetness(self) -> int:\n        if self.size == \"P\":  # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n\n    def show(self) -> None:\n        print(f\"{self.color} {self.size} {self.wetness}\")\n\n    def __str__(self) -> str:  # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\n\ndef main():\n    towel: Towel = Towel(\"\", \"\")\n    while True:\n        line: str = input()\n        print(\"$\" + line)\n        args: list[str] = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\":  # criar cor tamanho\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        else:\n            print(\"fail: comando n\u00e3o encontrado\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
            "lines": "62"
        }
    ]
}